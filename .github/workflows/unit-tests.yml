name: Unit-Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

# Cancel already running workflows if new ones are scheduled
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false  # Allows for matrix sub-jobs to fail without cancelling the rest
      matrix:
        platform: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        id: python_setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Python Dependency Caching
        uses: actions/cache@v3
        id: python_cache
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: "python-${{ runner.os }}-v1-${{ steps.python_setup.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}"

      - name: Install poetry
        shell: bash
        run: |
          pip install poetry

      - name: Install dependencies using poetry
        if: ${{ steps.python_cache.outputs.cache-hit }} == "true"
        shell: bash
        run: python -m poetry install --without lint --without release

      - name: Add poetry environment to path
        run: |
          echo "$(python -m poetry env info --path)/bin" >> $GITHUB_PATH
          python -m poetry -V

      - name: Run pytest
        run: poetry run task test

  tests-done:
    needs: [unit-tests]
    if: always() && !cancelled()
    runs-on: ubuntu-latest

    steps:
      - name: Set status based on required jobs
        env:
          RESULTS: ${{ join(needs.*.result, ' ') }}
        run: |
          for result in $RESULTS; do
            if [ "$result" != "success" ]; then
              exit 1
            fi
          done
