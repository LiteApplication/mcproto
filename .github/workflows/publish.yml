name: Publish to PyPI / GitHub

on:
  push:
    tags:
      - "v*"

jobs:
  publish:
    name: "Build and publish to PyPI"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        id: python_setup
        with:
          python-version: 3.11

      - name: Python Dependency Caching
        uses: actions/cache@v3
        id: python_cache
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: "python-${{ runner.os }}-v1-${{ steps.python_setup.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}"

      - name: Install poetry
        shell: bash
        run: |
          pip install poetry

      - name: Install dependencies using poetry
        if: steps.python_cache.outputs.cache-hit == "true"
        shell: bash
        run: python -m poetry install --only release-ci

      - name: Add poetry environment to path
        run: |
          echo "$(python -m poetry env info --path)/bin" >> $GITHUB_PATH
          python -m poetry -V

      - name: Set version with dynamic versioning
        run: poetry run poetry-dynamic-versioning

      - name: Build project for distribution
        run: poetry build

      - name: Check pre-release status
        id: check-version
        run: |
          [[ "$(poetry version --short)" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Run release script
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
